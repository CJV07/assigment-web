const balance = document.getElementById('balance');
const money_plus = document.getElementById('money-plus');
const money_minus = document.getElementById('money-minus');
const list = document.getElementById('list');
const form = document.getElementById('form');
const text = document.getElementById('text');
const amount = document.getElementById('amount');


const localStorageTransactions = JSON.parse(localStorage.getItem('transactions'));

let transactions = localStorage.getItem('transactions') !== null ? localStorageTransactions : [];

let expenseCategories = [];
let totalExpensesForEachCategory = [];
let categoriesColors = [];


//Insert transactiom
function addTransaction(e) {
    e.preventDefault();

    if(text.value.trim() === '' || amount.value.trim()===''){
        alert('Please add a text and amount');
    } else {
        const transaction = { 
            id: generateID(),
            text: text.value,
            amount: +amount.value
        };

       

    transactions.push(transaction);

    addTransactionDOM(transaction);

    updateValues();

    updateLocalStorage();
    
    location.reload();

    text.value= '';
    amount.value= '';
    }
}

//Generate random ID
function generateID(){
    return Math.floor(Math.random() * 100000000 );
}

//Add transactions to DOM list

function addTransactionDOM(transaction){
    //get sign
    const sign = transaction.amount < 0 ? '-' : '+';

    const item = document.createElement('li');

    //Add class based on value 

    item.classList.add(transaction.amount < 0 ? 'minus' : 'plus');

    item.innerHTML = `
    ${transaction.text} <span>${sign}${Math.abs(transaction.amount)}
    </span> <button class= "delete-btn" onclick="removeTransaction(${transaction.id})">x</button>
    `;
    list.appendChild(item);
}

//update balance income and expense

function updateValues(){
    const amounts = transactions.map(transaction => transaction.amount);

    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);

    const income = amounts
                            .filter(item => item > 0)
                            .reduce((acc, item) => ( acc+= item), 0)
                            .toFixed(2);

    const expense = 
                    (amounts
                    .filter(item => item < 0)
                    .reduce((acc,item) => (acc +=item), 0) * -1)
                    .toFixed(2);      
                    
    balance.innerText =  `${total} $`;
    money_plus.innerText = `${income} $`;
    money_minus.innerText = `${expense} $`;    
    
    if ( total < 0 ){
        console.log('negative')
        document.getElementById('balance').classList.add('negative');
    }

    if ( total >= 0 ){
        console.log('pos')
        document.getElementById('balance').classList.remove('negative');
    }


}

//Remove transaction by ID
function removeTransaction(id){
    transactions = transactions.filter(transaction => transaction.id !== id);
    
    updateLocalStorage();
   
    init();
    
}

//Update local storage transactions 
function updateLocalStorage(){
    localStorage.setItem('transactions', JSON.stringify(transactions));
    
}

//init app 
function init(){
    list.innerHTML='';

    transactions.forEach(addTransactionDOM);
    updateValues();
    pieChart();    
    
    
}

init();

form.addEventListener('submit', addTransaction);

function pieChart() {
    if (localStorage.getItem('transactions') !== null) {
        let transactionsInformations = JSON.parse(localStorage.getItem('transactions'));

        // loop through stored transactions to get each expense title
        for (i = 0; i < transactionsInformations.length; i++) {
            let expenseCategory = transactionsInformations[i].text;

            let expenseAmount =  transactionsInformations[i].amount;

            let randomColor = '#' + Math.floor(Math.random()*16777215).toString(16);

            // update expense categories array
            expenseCategories.push(expenseCategory);    
            
            // update expense amount array
            totalExpensesForEachCategory.push(expenseAmount);

            // update category color array
            categoriesColors.push(randomColor);
        }

        new Chart("myPieChart", {
            type: "pie",
            data: {
              labels: expenseCategories,
              datasets: [{
                backgroundColor: categoriesColors,
                data: totalExpensesForEachCategory
              }]
            },
            options: {
              title: {
                display: false
              }
            }
        });
        
    }
}